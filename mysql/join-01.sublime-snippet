<snippet>
  <content><![CDATA[
DROP DATABASE IF EXISTS ${1:app};

CREATE DATABASE IF NOT EXISTS ${1:app};

USE ${1:app};

CREATE TABLE products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100),
    price DECIMAL(13,2) NOT NULL
);

CREATE TABLE orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    client_name VARCHAR(100)
);

CREATE TABLE orders_products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    order_id INT,
    quantity DECIMAL(13,2) NOT NULL,
    sales_date DATE NOT NULL,

    KEY (product_id , order_id),

    FOREIGN KEY (product_id)
        REFERENCES products (id)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (order_id)
        REFERENCES orders (id)
        ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO products(name, price)
VALUES('iPhone', 699),
      ('iPad', 599),
      ('Macbook Pro', 1299),
      ('Watch', 50),
      ('iWatch', 400);

INSERT INTO orders(client_name)
VALUES('Joe'),
      ('Mark');

INSERT INTO orders_products(product_id, order_id, quantity, sales_date)
VALUES(1, 1, 2, '2020-11-01'),
      (2, 1, 3, '2020-11-01'),
      (1, 2, 4, '2020-11-01'),
      (2, 2, 5, '2020-11-01'),
      (3, 2, 3, '2020-11-01');


##############################
# INNER JOIN
#
# It is used to return all rows from multiple tables where the join condition is satisfied. It is the most common type of join.
##############################

# Get All Orders
SELECT
    products.id AS productId,
    products.name AS productName,
    products.price AS productPrice,
    orders.id AS orderId,
    orders.client_name AS clientName,
    orders_products.quantity AS productQuantity,
    orders_products.sales_date AS salesDate
    FROM orders_products
        INNER JOIN products on products.id = orders_products.product_id
        INNER JOIN orders on orders.id = orders_products.order_id;

# Result
# productId   productName          productPrice    orderId clientName  productQuantity    salesDate
# 1             iPhone               699.00           1      Joe           2.00           2020-11-01
# 2             iPad                 599.00           1      Joe           3.00           2020-11-01
# 1             iPhone               699.00           2      Mark          4.00           2020-11-01
# 2             iPad                 599.00           2      Mark          5.00           2020-11-01
# 3             Macbook Pro          1299.00          2      Mark          3.00           2020-11-01


# Get only order with id = 1
SELECT
    products.id AS productId,
    products.name AS productName,
    products.price AS productPrice,
    orders.id AS orderId,
    orders.client_name AS clientName,
    orders_products.quantity AS productQuantity,
    orders_products.sales_date AS salesDate
    FROM orders_products
        INNER JOIN products on products.id = orders_products.product_id
        INNER JOIN orders on orders.id = orders_products.order_id
    WHERE orders.id = 1;

# Result
# productId   productName   productPrice    orderId   clientName  productQuantity   salesDate
# 1             iPhone        699.00          1         Joe         2.00            2020-11-01
# 2             iPad          599.00          1         Joe         3.00            2020-11-01


##############################
# LEFT JOIN
#
# The LEFT JOIN returns all the rows from the table on the left even if no matching rows have been found in the table on the right.
# Where no matches have been found in the table on the right, NULL is returned.
##############################

# Get all products with the sold amount
SELECT
    products.id AS productId,
    products.name AS productName,
    products.price AS productPrice,
    SUM(orders_products.quantity) AS soldAmount
    FROM products
        LEFT JOIN orders_products on products.id = orders_products.product_id
    GROUP BY products.id;

# productId   productName     productPrice    soldAmount
# 1             iPhone           699.00         6.00
# 2             iPad             599.00         8.00
# 3             Macbook Pro      1299.00        3.00
# 4             Watch            50.00          NULL
# 5             iWatch           400.00         NULL

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>clivern-mysql-join-01</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.sql</scope>
</snippet>