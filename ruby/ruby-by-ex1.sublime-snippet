<snippet>
  <content><![CDATA[
# Basic Syntax
x = 1
y = "Hello"

BEGIN {
    puts "Start the thing"
}

END {
    puts "End the thing"
}

puts "Hello"
puts "Test", x
puts "Test " + y

# Override module method
def Math.sqrt(x)
    x + 2
end

puts Math.sqrt(16)

# Define a function
def something(x)
    return x + 1
end


10.times do puts "hi" end

10.times do
    puts "g"
end

puts something(2)


class Person

    attr_accessor :name, :age, :gender

    def initialize(args=1)

    end
end

person = Person.new

person.name = "Joe"

puts person.name

class Pet
    attr_accessor :name, :gender
end

class Dog < Pet

end

class Snake < Pet
    attr_accessor :length
end


snake = Snake.new
snake.length = 10

puts snake.length

puts snake.class
puts 1.class

Kernel.puts "Hello"

puts "Hello".length
puts "hello".upcase.downcase

x = 3
y = 5

x += 1
x = x + y
y /= 5

puts x
puts y

puts "x is more that 3" if x > 3
puts "Some .." if x > 3 && y > 0
puts "Some ..." if x > 3 && y > 4
puts "Some ..." unless x > 3 && y > 0
puts "Some ...." unless x > 3 && y > 4
puts "Some ....." if !(x > 3 && y > 4)
puts "Some ......" if x == 9
puts "Some ......." if x.between?(8, 10)

5.times { puts "loop" }

puts "----------"

5.times do |x|
    puts x
end

puts "----------"

5.upto(10) do |x|
    puts x
end

puts "----------"

10.downto(5) do |x|
    puts x
end

puts "----------"

0.step(50, 5) do |x|
    puts x
end

puts "----------"


puts 10 / 3

puts 10.to_f / 3.to_f
puts 3.7.to_i

x = <<DOC
Something
Goes Here
DOC

y = %q{Something
Big Here}

z = %q!Two Lines
Text!

puts x
puts y
puts z


puts "repeat " * 3
puts "a" > "b" # false


i = 30
puts "i = #{i}"
puts "i = " + i.to_s
puts "1 + 1 = #{1 + 1}"
puts "repeater #{"repeat " * 3}"


puts "hello".chop.chop # hel

puts "hello".sub("l", "L")
puts "hello".gsub("l", "L")


puts "hello".sub(/^../, "HE") # First two letters
puts "hello".sub(/..$/, "LO") # Last two letters


"Hello".scan(/./) { |match|  puts match }

"Hello".scan(/./) do |match|
    puts match.upcase
end

"Hello".scan(/../) do |match|
    puts match.upcase
end

"Joe bough 3 boxes for $100".scan(/\d+/) do |x|
    puts x
end

puts "Match" if "hello".match(/[he]/)
puts "Match" if "hello" =~ /[he]/


x = [1, 2, 3, 4]

x << 5
x << 6

puts x.length

puts x.pop

puts x.length
puts x.size
puts x.join
puts x.join(', ')

puts x[4]

puts ["A", "B"].join('')

puts x.inspect

puts "A B".split(' ').inspect
puts "A B C".split(/\s+/).inspect

"A B C D E F".split(/\s+/).each do |element|
    puts element.to_s
end

"A B C D E F".split(/\s+/).each { |element| puts element.to_s }


# Convert array on the fly
y = [1, 2, 3, 4, 5].collect { |element| element + 1 }

puts y.inspect


puts ([1] + [2]).inspect
puts ([1, 2] - [1, 2, 3]).inspect
puts ([1, 2, 3, 4] - [1, 2, 3]).inspect


x = []

puts "x is empty" if x.empty?


x = [1, 3, "a"]

puts x.include?("a")
puts x.include?(2)

puts x.first
puts x.last

puts x.first(2).inspect
puts x.last(2).inspect
puts x.reverse.inspect

dict = {'cat' => 'a', 'dog' => 'b'}

puts dict.size
puts dict['cat']
puts dict.inspect

dict.each do |k, v|
    puts "#{k} = #{v}"
end

puts dict.keys.inspect
puts dict.values.inspect

dict.delete('cat')

puts dict.keys.inspect


a = {'a' => 12, 'b' => 20}
a.delete_if {|k, v| v > 15}
puts a.inspect


b = {
    "a" => {
        "b" => [1, 2, 3]
    }
}

puts b['a']['b'].inspect
puts b['a']['b'].length

age = 10

if age < 18
    puts "age less 18"
else
    puts "age more 18"
end

z = age < 18 ? "age less 18" : ""

puts "You are" + (age < 18 ? "young" : "old")

color = "red"

case color
    when "red"
        puts "Red"
    else
        puts "Unknown"
end

x = 1

while x < 10
    puts x
    x +=1
end

until x > 10
    puts x
    x += 1
end


j = lambda { |param| puts param }
j.call(300)


class Integer
    def days
        self * 60 * 60 * 24
    end
end

puts Time.now
puts Time.now - 200
puts Time.now + 1.days
puts Time.local(2020, 1, 1)
puts Time.utc(2020, 1, 1)


t = Time.at(Time.now.to_i)
puts t.year, t.month, t.day, t.zone
puts t.utc?
puts t.gmt?


('A'..'Z').to_a.each { |e| puts e  }
('a'..'z').each { |e| puts e  }


puts ('A'..'Z').include?('A')
puts ('A'..'Z').include?('r')

u = ('A'..'Z').to_a
puts u[1..3].inspect
u[1..3] = []
puts u[1..3].inspect

gender = :male

puts "Male" if gender == :male

person1 = {'name' => "Fred", 'gender' => :male, 'age' => 20}
puts person1.inspect
puts person1['name']
puts person1['gender']
puts person1['gender'] == :male
puts person1['gender'].to_s == 'male'
puts person1['name'].to_sym == :Fred


puts "12".to_i + 1
puts 12.to_s + "--"
puts 12.to_f
puts 12.01.to_i


class Shape

end

class Square < Shape
    def initialize(side_length)
        # Class Vars
        if defined?(@@instances)
            @@instances += 1
        else
            @@instances = 1
        end

        @side_length = side_length
    end

    # Class Methods
    def area
        @side_length * @side_length
    end

    # Instance Methods
    def self.count
        @@instances
    end
end


class Triangle < Shape

    def self.test_method
        puts "Hello from Class #{self.class}"
    end

    def test_method
        puts "Hello from Class #{self.class} Instance"
    end
end

square1 = Square.new(20)
square2 = Square.new(20)

puts square1.area
puts square2.area
puts Square.count


Triangle.test_method
Triangle.new.test_method

# Global Vars
$p = "P"

def basic
    puts $p
end

basic

class Person
    def initialize(name)
        @name = name
    end

    def name
        @name
    end
end

class Doctor < Person
    def name
        "Dr. #{super}"
    end
end

puts Doctor.new("Mark").name


puts "H".methods.join(", ")
puts square1.instance_variables.inspect



class Something

    def initialize(name)
        @name = name
    end

    private

    def set_name(name)
        @name = name
    end

    public

    def set(name)
        @name = name
    end

    # Can get called from sub-classes only
    def get_name()
        @name
    end

    def to_s()
        "<Something(@name=#{@name})>"
    end

    private :set_name
    public :set
    protected :get_name
end

something = Something.new("Mark")
something.set("Joe")
puts something

# something.set_name("Joe") -> trigger error


class Drawing
    # Constant
    PI = 4.5

    def get_circle()
        Circle.new
    end

    class Circle
        def what()
            "Circle"
        end
    end
end

module NamedStuff
    class Drawing
        PI = 5
    end
end


puts Drawing.new.get_circle.what
puts Drawing::Circle.new.what
puts Drawing::PI
puts NamedStuff::Drawing::PI


module Util
    def class_name
        self.class.to_s
    end
end

class Person
    def initialize()
    end
    include Util
end

x = Person.new
puts x.class_name

module Stuff
    def hello
        puts "Hello"
    end
end


include Stuff

hello


puts [1, 5, 8, 45, 34, 9].min


class Song
    include Comparable

    attr_accessor :length

    def <=>(other)
        @length <=> other.length
    end

    def initialize(name, length)
        @name = name
        @length = length
    end
end

a = Song.new("Rock around", 143)
b = Song.new("Bowman", 200)

puts a > b


Post = Struct.new(:name, :slug, :author)
article = Post.new("Hello World", "hello-world", "Joe Doe")

puts article.name

class Article
    attr_accessor :name, :slug, :author

    def initialize(name, gender, author)
        @name = name
        @slug = slug
        @author = author
    end
end


require "./ext"
require_relative "ext"
load 'ext.rb'

puts test

# Add dir for require
$:.push '/'

# Get all dirs to search for ruby modules
$:.each { |d| puts d }

begin
    puts 1 / 0
rescue
    puts "You caused an error"
end

require 'geckos'

puts "Say: " + Geckos::Hola.new.hi("any")

class CustomException < StandardError

end

class MyCustomException < StandardError
  def initialize(msg="This is a custom exception", exception_type="custom")
    @exception_type = exception_type
    super(msg)
  end

  # Get Exception Type
  def exception_type
    @exception_type
  end
end

begin
    raise "This is an exception"
rescue => e
    puts e.message
end

begin
    raise MyCustomException.new "Message, message, message", "Yup"
rescue MyCustomException => e
    puts e.message
    puts e.exception_type
end


# Override any class method

puts "H".length

class String
    def length
        20
    end
end

puts "H".length

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>clivern-ruby-by-ex1</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.rb</scope>
</snippet>
