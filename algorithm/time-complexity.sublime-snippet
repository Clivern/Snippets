<snippet>
  <content><![CDATA[
"""
Constant time — O(1) "There is always a fixed number of operations."
"""
def constant(n):
    sec = 1
    result = n * n
    return sec

print([constant(i) for i in range(1, 40)])
# [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

"""
Logarithmic time — O(log n) "The value of n is halved on each iteration of the loop"
"""
def logarithmic(n):
    result = 0
    sec = 1
    while n > 1:
        sec += 1
        n //= 2
        sec += 1
    return sec
    return result

print([logarithmic(i) for i in range(1, 40)])
# [1, 3, 3, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9,
# 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11]

"""
Linear time — O(n)
"""
def linear(n):
    sec = 1
    result = 0
    for i in range(n):
        result += i
        sec += 1
    return sec
    return result

print([linear(i) for i in range(1, 40)])
# [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
# 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]

"""
Quadratic time — O(n^2).
"""
def quadratic(n):
    sec = 1
    result = 0
    for i in range(n):
        sec += 1
        for j in range(i, n):
            sec += 1
            result += 1
    return sec
    return result

print([quadratic(i) for i in range(1, 40)])
# [3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190,
# 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820]

"""
Linear time — O(n + m): Sometimes the complexity depends on more variables
"""
def linear2(n, m):
    result = 0
    sec = 1
    for i in range(n):
        sec += 1
        result += i
    for j in range(m):
        sec += 1
        result += j
    return sec
    return result

print([linear2(i, i) for i in range(1, 40)])
# [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43,
#  45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79]


"""
Exponential time - O(2^n): When the growth doubles with each addition to the input data set.
This kind of time complexity is usually seen in brute-force algorithms.
"""
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>clivern-time-complexity</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.python</scope>
</snippet>
