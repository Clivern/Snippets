<snippet>
  <content><![CDATA[
def find_smallest_index(lst):
    smallest = lst[0]
    index = 0
    for i in range(1, len(lst)):
        if lst[i] < smallest:
            smallest = lst[i]
            index = i
    return index

def selection_sort(lst):
    """
    selection sort O(n^2)
    """
    new_arr = []

    for i in range(len(lst)):
        smallest = find_smallest_index(lst)
        new_arr.append(lst.pop(smallest))

    return new_arr

def quick_sort(lst):
    """
    Quick Sort O(n * log(n))
    """
    if len(lst) <= 1:
        return lst
    else:
        pivot = lst[0]
        least = [i for i in lst[1:] if i <= pivot]
        more = [i for i in lst[1:] if i > pivot]
        return quick_sort(least) + [pivot] + quick_sort(more)


def bubble_sort(lst):
    """
    Bubble Sort Ðž(n ^ 2)
    """
    for num in range(len(lst)-1, 0, -1):
        for i in range(num):
            if lst[i] > lst[i+1]:
                lst[i], lst[i+1] = lst[i+1], lst[i]
    return lst

if __name__ == '__main__':
    assert selection_sort([9, 8, 3, 2, 1, 0, 89, 30, 78]) == [0, 1, 2, 3, 8, 9, 30, 78, 89]
    assert quick_sort([1, 2, 5, 8, 9, 39, 67, 536, 829]) == [1, 2, 5, 8, 9, 39, 67, 536, 829]
    assert bubble_sort([1, 2, 5, 8, 9, 39, 67, 536, 829]) == [1, 2, 5, 8, 9, 39, 67, 536, 829]

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>clivern-sort-algorithm</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.python</scope>
</snippet>
