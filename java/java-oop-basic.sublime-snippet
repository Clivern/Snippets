<snippet>
  <content><![CDATA[
public class ${1:App} {

    // The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
    private int privateAccess;

    // The access level of a default modifier is only within the package. It cannot be accessed from outside the package.
    // If you do not specify any access level, it will be the default.
    int defaultAccess;

    // The access level of a protected modifier is within the package and outside the package through child class.
    // If you do not make the child class, it cannot be accessed from outside the package.
    protected int protectedAccess;

    // The access level of a public modifier is everywhere.
    // It can be accessed from within the class, outside the class, within the package and outside the package
    public int publicAccess;

    //static variable
    static String LANG = "EN";

    static {
        System.out.println("Static Block 1 run");

        LANG = "FR";
    }

    static {
        System.out.println("Static Block 2 run");

        LANG = "DE";
    }

    // no-arg Constructor
    ${1:App}() {
        // Constructor chaining
        this(1);
    }

    // Constructor with param (Constructor overloading)
    ${1:App}(int param) {
        this.defaultAccess = param;
    }

    public void run() {
        System.out.println("Hello");
        System.out.println(${1:App}.LANG);
    }

    public static void main(String[] args) {
        (new ${1:App}()).run();

        // Access static method directly
        ${1:App}.staticMethod();

        ${1:App} app = new ${1:App}();
        // Static vars can be changed
        app.LANG = "EN";
        // Access static method from an instance
        app.staticMethod();
        app.run();
    }


    // The method is accessible by all classes when we use public specifier in our application.
    public void publicMethod()
    {
        // without this keyword
        publicMethod(1);
    }

    // When we use a private access specifier, the method is accessible only in the classes in which it is defined.
    private void privateMethod()
    {
        //~
    }

    // When we use protected access specifier, the method is accessible within the same package or subclasses in a different package.
    protected void protectedMethod()
    {
        //~
    }

    // When we do not use any access specifier in the method declaration, Java uses default access specifier by default.
    // It is visible only from the same package only.
    void defaultMethod()
    {
        //~
    }

    // Method overloading
    public void publicMethod(int param)
    {
        //~
    }


    // Static method can be accessed directly from static and non-static method
    public static void staticMethod()
    {
        System.out.println("Static Method");
    }
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>clivern-java-oop-basic</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.java</scope>
</snippet>
