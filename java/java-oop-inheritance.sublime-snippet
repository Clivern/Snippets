<snippet>
  <content><![CDATA[
class Parent {

    // The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
    private int privateAccess = 2;

    // The access level of a default modifier is only within the package. It cannot be accessed from outside the package.
    // If you do not specify any access level, it will be the default.
    int defaultAccess = 2;

    // The access level of a protected modifier is within the package and outside the package through child class.
    // If you do not make the child class, it cannot be accessed from outside the package.
    protected int protectedAccess = 2;

    // The access level of a public modifier is everywhere.
    // It can be accessed from within the class, outside the class, within the package and outside the package
    public int publicAccess = 2;

    String something = "parent";

    static String LANG = "EN";

    Parent(int privateAccess){
        System.out.println("Constructor of Parent");
        this.privateAccess = privateAccess;
    }

    void disp1(){
        System.out.println("Data: " + this.privateAccess);
    }

    void disp2(){
        System.out.println("Data: " + this.privateAccess);
    }
}

public class ${1:App} extends Parent {

    String something = "child";

    ${1:App}(int param) {
        super(param);
        System.out.println("Constructor of Child");
    }

    public static void main(String[] args) {
        ${1:App} app = new ${1:App}(1);

        // app.privateAccess = 20; // throws error
        app.defaultAccess = 20;
        app.protectedAccess = 20;
        app.publicAccess = 20;

        app.disp1();
        app.disp2();
        app.disp3();

        app.overloadMethod(1, 2, 3);
        app.overloadMethod(1, 2);

        Parent obj1 = new Parent(1);
        Parent obj2 = new ${1:App}(1);

        obj1.disp1(); // run the Parent.disp1
        obj2.disp1(); // run the ${1:App}.disp1
    }

    // Overrides the parent disp
    @Override
    void disp1(){
        System.out.println("Child Method");
        // Calling the disp() method of parent class
        super.disp1();
    }

    void disp3 () {
        System.out.println("something parent var#: " + super.something);
        System.out.println("something child var#: " + this.something);
    }

    void overloadMethod(int a, double b){
        System.out.println("Method A");
    }

    void overloadMethod(int a, double b, double c){
        System.out.println("Method B");
    }
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>clivern-java-oop-inheritance</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.java</scope>
</snippet>
