<snippet>
  <content><![CDATA[
class MyException extends Exception {
    MyException(String errorMessage) {
        super(errorMessage);
    }
}

class Demo {

    int param;

    Demo(int param) {
        this.param = param;
    }

    void disp() throws MyException, Exception {
        if (this.param > 5) {
            throw new MyException("more than 5");
        } else if (this.param < 5) {
            throw new Exception("less than 5");
        } else {
            System.out.println("Nice");
        }
    }

}

public class ${1:App} {

    public static void main(String[] args) throws MyException, Exception {
        ${1:App} app = new ${1:App}();
        app.disp1();
        app.disp2();
    }

    /**
     * If exception occurs in try blockâ€™s body
     * then control immediately transferred(skipping rest of the statements in try block) to the catch block.
     * Once catch block finished execution then finally block and after that rest of the program.
     *
     * If there is no exception occurred in the code which is present in try block then first,
     * the try block gets executed completely and then control gets transferred to finally block (skipping catch blocks).
     *
     * If a return statement is encountered either in try or catch block.
     * In this case finally block runs. Control first jumps to finally and then it returned back to return statement.
     */
    void disp1() {
        try {
            (new Demo(5)).disp();
            return;
        } catch (MyException e) {
            System.out.println(e.getMessage());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            System.out.println("Finally, run no matter exception raised or not. Also if return is there");
        }
    }

    void disp2() throws MyException, Exception {
        (new Demo(5)).disp();
    }
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>clivern-java-exceptions</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.java</scope>
</snippet>
